from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from app.keyboards.back_to_main_keyboard import back_to_main_keyboard

from app.scripts.check_url import check_url

from app.database.queue.set_rss_source import set_rss_source
from app.database.queue.get_user_id import get_user_id
from app.database.queue.check_rss_source import check_rss_source


class AddRss(StatesGroup):
    rss_url = State()


add_rss_router = Router()


@add_rss_router.callback_query(F.data == 'add_rss')
async def add_rss(message: CallbackQuery, state: FSMContext):
    await state.set_state(AddRss.rss_url)

    content = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π URL RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∞ üò∏'

    await message.message.edit_text(content, reply_markup=back_to_main_keyboard())


@add_rss_router.message(AddRss.rss_url)
async def add_rss_url(message: Message, state: FSMContext):
    is_valid_url = await check_url(message.text)

    if not is_valid_url:
        content = '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –í–∞–º–∏ URL RSS –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –ª–∏–±–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòø\n' \
                  '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'

        await message.answer(content, reply_markup=back_to_main_keyboard())
    else:
        rss_exists = await check_rss_source(message.text)

        if rss_exists:
            content = '–í—ã —É–∂–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —ç—Ç–æ—Ç RSS –∏—Å—Ç–æ—á–Ω–∏–∫ üòº'

            await message.answer(content, reply_markup=back_to_main_keyboard())
            return

        user_id = await get_user_id(message.from_user.id)
        await set_rss_source(message.text, user_id)

        await state.clear()

        content = 'RSS –∏—Å—Ç–æ—á–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω üòª'

        await message.answer(content, reply_markup=back_to_main_keyboard())